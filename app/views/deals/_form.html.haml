= render :partial => 'shared/resource_error', locals: {resource: @deal}

= form_for @deal, html: { multipart: true, class: "editor-form row gt-3 dropzone" , data: { page: 'main-editor' }, autocomplete: "off" } do |form|
  .row
    .col-md-1
      #dropzone-previews-container.dropzone-previews
        =resource_image(@deal.image, class: 'deal-preview-img img-thumbnail')
    .col-md-11
      .row
        .col-md-12
          .input-group.mb-3
            %span.input-group-text URL
            = form.url_field :url, class: "form-control"
        .col-md-12
          .input-group.mb-3
            %span.input-group-text Title
            = form.text_field :title, class: "form-control"

  .row
    .col-md-2
      = form.label :image, class: "label"
      = dropzone_controller_div do
        = form.file_field :image, direct_upload: true, multiple: false, data: { 'dropzone-target': 'input' }
        .dropzone-msg.dz-message.needsclick.text-gray-600
          %h3.dropzone-msg-title Drag or click here to browse
          %span.dropzone-msg-desc.text-sm 2 MB max size. Allowed file types png, jpg.
    .col-md-10
      .row 
        .col-md-12 
          = form.label :body, class: "form-label"
          = form.rich_text_area :body, class: "form-control medium-editable  mt-2", autofocus: false
  .row      
    .col-md-3
      = form.label :deal_price, class: "form-label"
      .input-group.mb-3
        %span.input-group-text $
        = form.number_field :price, class: "form-control"
    .col-md-3
      = form.label :retail_price, class: "form-label"
      .input-group.mb-3
        %span.input-group-text $
        = form.number_field :retail_price, class: "form-control"
    .col-md-3
      = form.label :discount, class: "form-label"
      .input-group.mb-3
        %span.input-group-text %
        = form.number_field :discount, class: "form-control"
    .col-md-3
      = form.label :expiration_date, class: "form-label"
      = form.date_field :expiration_date, class: "form-control"
  .row
    .col-md-6
      -# = form.label :url, class: "form-label"
      -# .input-group.mb-3
      -#   = form.url_field :url, class: "form-control"
    .col-md-3
      = form.label :store, class: "form-label"
      = form.select :store_id, Store.all.collect { |p| [ p.name, p.id ] }, { prompt: "Select a store" }, class: "form-select"
      -# =form.text_field :store_id, list: 'store_list'
      -# %datalist#store_list
      -#   = options_for_select(Store.all.pluck(:name, :id), @deal.store_name)
    .col-md-3
      = form.label :category, class: "form-label"
      = form.select :category_id, Category.all.collect { |p| [ p.name, p.id ] }, { prompt: "Select a store" }, class: "form-select select-picker"

  .col-12.mt-4
    = form.label :tags, class: 'form-label'
    = form.text_field :all_tags, class: 'form-control tagsinput', 'data-role': 'tagsinput', value: tag_from_param(@deal)

  - if @deal.new_record?
    .col-12.mt-4
      .form-check
        = form.check_box :auto_create_link
        = form.label :auto_create_link, class: 'form-check-label'

  = render 'meta_fields', f: form

  .col-12.mt-4
    .actions
      = form.submit 'Save', class: 'btn btn-primary'

- unless @deal.new_record?
  = form_with(url: create_link_deal_path(@deal), method: :post) do |form|
    = form.submit 'Create Link', class: 'btn btn-primary'


:javascript
  document.addEventListener('DOMContentLoaded', () => {
  const linkInput = document.getElementById('deal_url');
  const titleInput = document.getElementById('deal_title');

  linkInput.addEventListener('blur', () => {
    const url = linkInput.value.trim();

    if (url === '' || titleInput.value.trim() !== '') {
      return;
    }

    // Make an asynchronous request to the server to fetch the title
    fetch(`/fetch_url_title?link_url=${encodeURIComponent(url)}`)
      .then(response => response.text())
      .then(title => {
        // Update the deal title field with the fetched title
        if(titleInput.value.trim() === ''){
          titleInput.value = title;
        }
      })
      .catch(error => {
        console.error('Error fetching title:', error);
      });
    });
  });
